positions <- sample(nrow(all_data),size=floor((nrow(all_data)/4)*3))
training<- all_data[positions,]
testing<- all_data[-positions,]
nrow(training)
nrow(testing)
lm_fit<-lm(y~x1+x2+x3,data=training)
predictions<-predict(lm_fit,newdata=testing)
error<-sqrt((sum((testing$y-predictions)^2))/nrow(testing))
error
library(foreach)
length_divisor<-6
iterations<-5000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(training), size=floor((nrow(training)/length_divisor)))
train_pos<-1:nrow(training) %in% training_positions
lm_fit<-lm(y~x1+x2+x3,data=training[train_pos,])
predict(lm_fit,newdata=testing)
}
predictions<-rowMeans(predictions)
error<-sqrt((sum((testing$y-predictions)^2))/nrow(testing))
error
library(randomForest)
install.packages("randomForest")
library(randomForest)
rf_fit<-randomForest(y~x1+x2+x3,data=training,ntree=500)
predictions<-predict(rf_fit,newdata=testing)
error<-sqrt((sum((testing$y-predictions)^2))/nrow(testing))
error
length_divisor<-6
iterations<-5000
predictions<-foreach(m=1:iterations,.combine=cbind) %do% {
training_positions <- sample(nrow(training), size=floor((nrow(training)/length_divisor)))
train_pos<-1:nrow(training) %in% training_positions
lm_fit<-lm(y~x1+x2+x3,data=training[train_pos,])
predict(lm_fit,newdata=testing)
}
library(randomForest)
rf_fit<-randomForest(y~x1+x2+x3,data=training,ntree=500)
rf_predictions<-predict(rf_fit,newdata=testing)
predictions<-(lm_predictions+rf_predictions)/2
lm_predictions<-rowMeans(predictions)
predictions<-(lm_predictions+rf_predictions)/2
error<-sqrt((sum((testing$y-predictions)^2))/nrow(testing))
error
library(e1071)
svm_fit<-svm(y~x1+x2+x3,data=training)
svm_predictions<-predict(svm_fit,newdata=testing)
error<-sqrt((sum((testing$y-svm_predictions)^2))/nrow(testing))
error
predictions<-(svm_predictions*2+rf_predictions)/3
error<-sqrt((sum((testing$y-predictions)^2))/nrow(testing))
error
nrow(ttrain)
set.seed(10)
positions <- sample(nrow(ttrain),size=floor((nrow(ttrain)/4)*3))
training<- all_data[positions,]
training<- ttrain[positions,]
testing <-ttrain[-positions,]
nrow(training)
nrow(testing)
rf_fit<-randomForest(y~x1+x2+x3,data=training,ntree=500)
predictions<-predict(rf_fit,newdata=testing)
rf_fit<-randomForest(survived~pclass+age+agenull+sibsp+parch+fare+embarked+cabin,data=training,ntree=500)
rf_fit<-randomForest(as.factor(survived)~pclass+age+agenull+sibsp+parch+fare+embarked+cabin,data=training,ntree=500)
predictions<-predict(rf_fit,newdata=testing)
summary(predictions)
table(Actual=testing$survived, Fitted=predictions)
rf_fit<-randomForest(as.factor(survived)~pclass+age+agenull+age:pclass+sibsp+parch+fare+embarked+cabin,data=training,ntree=500)
predictions<-predict(rf_fit,newdata=testing)
summary(predictions)
table(Actual=testing$survived, Fitted=predictions)
library(e1071)
svm_fit<-svm(y~x1+x2+x3,data=training)
svm_predictions<-predict(svm_fit,newdata=testing)
svm_fit <- svm(survived ~ ., data=ttrain, type='C-classification, kernel='linear'')
svm_fit <- svm(survived ~ ., data=ttrain, type='C-classification', kernel='linear)
fdsg
''
'
svm_fit <- svm(survived ~ ., data=ttrain, type='C-classification', kernel='linear')
svm_fit <- svm(survived ~ ., data=ttrain, type='C-classification', kernel='poly')
svm_predictions<-predict(svm_fit,newdata=testing)
table(Actual=testing$survived, Fitted=svm_predictions)
nrow(testing)
svm_predictions<-predict(svm_fit,newdata=ttest)
head(ttest)
svm_poly_pred <-ttest
svm_poly_pred$survived <-svm_predictions
tmp <-kNNImpute(ttest,5)
library(imputation)
tmp <-kNNImpute(ttest,5)
ttest_clean <-tmp$x
svm_poly_pred <-ttest_clean
head(svm_poly_pred)
svm_poly_pred$survived <-svm_predictions
svm_predictions<-predict(svm_fit,newdata=ttest_clean)
svm_poly_pred <-ttest_clean
svm_poly_pred$survived <-svm_predictions
write.csv(svm_poly_pred, file="C:\\kaggling\\titanic\\model\\svm_poly_pred.csv")
write.csv(svm_poly_pred, file="C:\\kaggling\\titanic\\models\\svm_poly_pred.csv")
predictions<-predict(rf_fit,newdata=ttest_clean)
rf_pred <-ttest_clean
rf_pred$survived <-predictions
write.csv(rf_pred, file="C:\\kaggling\\titanic\\models\\rf_pred.csv")
library(RODBC)
channel <- odbcConnectExcel("c:/kaggling/evergreen/train.xlsx"
)
mydata <- sqlFetch(channel, "sample_boiler")
mydata
odbcClose(channel)
mydata
channel <- odbcConnectExcel("c:/kaggling/evergreen/train.xlsx"
)
channel <- odbcConnectExcel("c:/kaggling/evergreen/train.xlsx")
library(RODBC)
channel <- odbcConnectExcel("c:/kaggling/Evergreen/train.xlsx")
data <- read.table("c:/kaggling/Evergreen/boiler_sample.txt", sep="\t")
data
names(data)
data <- read.table("c:/kaggling/Evergreen/boiler_sample.txt", sep="\t", header=TRUE)
names(data)
library(rjson)
library(foreach)
data$boilerplate = as.character(data$boilerplate)
parsed = foreach(i=1:length(data$boilerplate), .packages = "rjson")%do%{
fromJSON(data$boilerplate[i])
}
parsed
data$boilerplate = as.character(data$boilerplate)
names(parsed)
parsed[1]
parsed[1]$title
parsed[[1]]$url
parsed[1]
str(parsed)
train <- read.table("c:/kaggling/Evergreen/boiler_sample.txt", sep="\t", header=TRUE)
getBroilerPlate <- function (train) {
library('rjson')
train$boilerplate <- as.character (train$boilerplate)
jsonData <- sapply (train$boilerplate, fromJSON)
bigDF <- NULL
for (i in c(1:length (jsonData))) {
myVar <- jsonData [[i]]
myDF <- data.frame (title = unlist (myVar)[1], body = unlist (myVar)[2], url = unlist (myVar)[3])
bigDF <- rbind (bigDF, myDF)
}
return (bigDF)
}
trainDF <- getBroilerPlate (train)
trainDF
names(train)
names(trainDF)
nrow(trainDF)
jsonData <- sapply(Data$boilerplate, fromJSON)
jsonData <- sapply(data$boilerplate, fromJSON)
Data$title <- sapply(1:nrow(data), function(i, jsonData) unlist(jsonData[[i]])[1], jsonData)
data$title <- sapply(1:nrow(data), function(i, jsonData) unlist(jsonData[[i]])[1], jsonData)
data$url <- sapply(1:nrow(data), function(i, jsonData) unlist(jsonData[[i]])[3], jsonData)
names(data)
data$body <- sapply(1:nrow(data), function(i, jsonData) unlist(jsonData[[i]])[2], jsonData)
names(data)
data <- subset(data, select = c(urlid,title, url, body))
names (data)
names (data)
names (data)
x <-1
print(x)
x
msg <-"hello"
msg
x <-1:20
x
x <- 9:29
x
x <-c (T, F)
attributes(x)
x
length(x)
y <- c(1.7, "a")
y <- c(TRUE, 2)
y
m <- matrix (1:6, nrow =2, ncol=3)
m
n <- matrix (1:6, nrow =2, ncol=3)
x <= list(m, n)
m
n
x <- list (m, n)
x
x <- factor (c("yes", "no", "yes", "yes", "no"))
x
table(x)
x <-data.frame(foo=1:4, bar=c(T,T,F,F))
x
nrow(x)
ncol(x)
str1 <-"?2000 blah blah E20,000 blah blah blah"
str2 <-"blah blah with no  mention of moolah"
x <- c("abc", "def", "cba a", "aa")
m <- regexpr("a+", x, perl=TRUE)
regmatches(x, m)
m <- regexpr("\\?", str1, perl=TRUE)
regmatches(x, m)
regmatches(str1, m)
m <- regexpr("\\?\", str1, perl=TRUE)
\
)
fsdfsfk
f""
"
m <- regexpr("\\\?\", str1, perl=TRUE)
m <- regexpr("\\?", str1, perl=TRUE)
regmatches(str1, m)
m <- regexpr("\\?[0-9]", str1, perl=TRUE)
regmatches(str1, m)
m <- regexpr("\\?[0-9]+", str1, perl=TRUE)
regmatches(str1, m)
m <- regexpr("[\\?[0-9]+]", str1, perl=TRUE)
regmatches(str1, m)
m <- regexpr("\\?[0-9]+", str1, perl=TRUE)
regmatches(str1, m)
m <- regexpr("\\?\d~", str1, perl=TRUE)
m <- regexpr("\\?\\d~", str1, perl=TRUE)
regmatches(str1, m)
m <- regexpr("\\?\\d+", str1, perl=TRUE)
regmatches(str1, m)
m <- regexpr("\\?\\d+", str1, perl=TRUE)
regmatches(str1, m)
m1 <- regexpr("\\?\\d+", str1, perl=TRUE)
m2 <- regexpr("E\\d+", str1, perl=TRUE)
regmatches(str1, m2)
str1
m2 <- regexpr("E\\d+,*\\d", str1, perl=TRUE)
regmatches(str1, m2)
m2 <- regexpr("E\\d+,*\\d+", str1, perl=TRUE)
regmatches(str1, m2)
m1 <- regexpr("\\?\\d+,*d+", str1, perl=TRUE)
regmatches(str1, m1)
m1 <- regexpr("\\?\\d+,*\\d+", str1, perl=TRUE)
regmatches(str1, m1)
monies <-regmatches(str1, m1)
monies
monies c(monies, regmatches(str1, m2))
monies <-c(monies, regmatches(str1, m2))
monies
str1
str1 <-"?3000 blah ?9999 ?988777 E8999 E09833"
m2 <- regexpr("E\\d+,*\\d+", str1, perl=TRUE)
m1 <- regexpr("\\?\\d+,*\\d+", str1, perl=TRUE)
monies c(monies, regmatches(str1, m2))
monies <-regmatches(str1, m1)
monies <-c(monies, regmatches(str1,m2))
monies
str1
m1 <- regexpr("\\?\\d+", str1, perl=TRUE)
regmatches(str1, m1)
str1
m3 <- regexpr("\\d+", str1, perl=TRUE)
regmatches(str,m3)
regmatches(str1,m3)
str1
m3 <- regexpr("\\d+", str1, perl=TRUE)
m3
str1
m3 <- gregexpr("\\d+", str1, perl=TRUE)
m3
m1 <- gregexpr("\\?\\d+", str1, perl=TRUE)
m2 <- gregexpr("E\\d+,*\\d+", str1, perl=TRUE)
monies <-regmatches(str1, m1)
monies <-c(monies, regmatches(str1, m2))
monies
tmp <-unlist(monies)
tmp
x = data.frame(x1=c(1,2,3,4,5),x2=c(2,4,6,8,10),x3=c(1,3,5,7,9))
x$x5=apply(x,1,mean)
x$x6=apply(x,1,sd)
print(x)
m1
str1
str2
x = rbind(str1, str2)
x
x[0,1]
x[1,1]
x[2,1]
length(x[1,1])
x[1,1]
x[2,1]
x
}
}
test <-getmoney(str1)
source('~/.active-rstudio-document')
test <-getmoney(str1)
test
x1
str1
str2
x <-rbind(str1, str2)
x[1]
x[2]
apply(x,1,getmoney)
result <-apply(x,1,getmoney)
result
str2 <-"blah blah with no  mention of moolah"
str1 <-"?2000 blah blah E20,000 blah blah blah"
sub("(a+)", "z\\1z", c("abc", "def", "cba a", "aa"), perl=TRUE)
tmp <- sub(m1, "", str1, perl=TRUE)
tmp
str1
m1
tmp <- sub("\\?", "", str1, perl=TRUE)
tmp
source('~/.active-rstudio-document')
result <-apply(x,1,getmoney)
result
x
library(RODBC)
drop (algae)
algae
rm (algae)
algae
head (magic04)
rm (magic04)
rm rf_pred
rm (rf_pred)
rm (svm_poly_pred)
rm (testing)
rm (train)
rm (training)
rm (tmp1)
rm (ttest_clean)
rm (x)
rm (ttest)
rm (ttrain)
rm (raw)
rm (births)
rm (birthstimeseries)
rm ()
rm (alldata)
rm (all_data)
rm (eurusd1)
rm (clean.algae)
rm (x1)
rm (x3)
rm (x2)
rm (y)
rm (volcano*)
rm (volcanodust)
rm (train_pos)
rm (volcanodustseries)
rm (volcanodustseriesarima)
rm (volcanodustseriesforecasts)
rm (tmp)
rm (svm_predictions)
rm (souvenirtimeseries)
rm (souvenir)
rm (svm_fit)
rm (skirtsseries)
rm (skirtseriesforecasts2)
channel <- odbcConnectExcel("c:/kaggling/evergreen/train.xlsx"
)
mydata <- sqlFetch(channel, "sample_boiler")
str(mydata)
source('~/.active-rstudio-document')
library(rjson)
library(foreach)
data$boilerplate = as.character(data$boilerplate)
jsonData <- sapply(mydata$boilerplate, fromJSON)
mydata$boilerplate = as.character(mydata$boilerplate)
jsonData <- sapply(mydata$boilerplate, fromJSON)
mydata$bp_title <- sapply(1:nrow(mydata), function(i, jsonData) unlist(jsonData[[i]])["title"], jsonData)
mydata$bp_body <- sapply(1:nrow(mydata), function(i, jsonData) unlist(jsonData[[i]])["body"], jsonData)
Data$bp_url <- sapply(1:nrow(Data), function(i, jsonData) unlist(jsonData[[i]])["url"], jsonData)
mydata$bp_url <- sapply(1:nrow(mydata), function(i, jsonData) unlist(jsonData[[i]])["url"], jsonData)
str(mydata)
head (mydata)
parsed = foreach(i=1:length(mydata$boilerplate), .packages = "rjson")%do%{
fromJSON(mydata$boilerplate[i])
}
parsed
parsed
library(tm)
myCorpus <- Corpus(VectorSource(parsed))
install.packages("tm")
library (tm)
myCorpus <- Corpus(VectorSource(parsed))
myCorpus
myCorpus <- tm_map(myCorpus, tolower)
myCorpus <- tm_map(myCorpus, removePunctuation)
myStopwords <- c(stopwords('english'), "available", "via")
myCorpus <- tm_map(myCorpus, removeWords, myStopwords)
myCorpus[[1]]
# http://www.rdatamining.com/examples/text-mining is source for this
dictCorpus <- myCorpus
myCorpus <- tm_map(myCorpus, stemDocument)
install.packages("Snowball")
install.packages("SnowballC")
library (Snowball)
myCorpus <- tm_map(myCorpus, stemDocument)
inspect(myCorpus[1:3])
myCorpus <- tm_map(myCorpus, stemCompletion, dictionary=dictCorpus)
llp
lpppo[op]
lpp
install.packages("DMwR")
library (DMwR)
data(Sales)
data(sales)
library (ROCR)
data(ROCR.simple)
pred <- prediction(ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred, "prec", "rec")
plot(perf)
data(iris)
iris
View(iris)
Iris.Features=Iris
iris.features=iris
iris.features$class <-null
iris.features$class <-NULL
library(rattle)
install.packages("rattle")
library(rattle)
rattle()
library(rattle)
rattle()
library(rattle)
rattle()
library (kernlab)
install.packages("kernlab")
library (caret)
install.packages("caret")
library (caret)
library (kernlab)
data(spam)
inTrain <-createDataPartition(y=spam$type), p=0.75, list=FALSE)
inTrain <-createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <-spam[inTrain,]
testing <-spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit <-train(type ~. , data=training, method="glm")
modelFit$finalModel
predictions <- predict(modelFit, newdata=testing)
predictions
confusionMatrix(predictions, testing$type)
library (rattle)
rattle()
crs$dataset
str(crs$dataset)
install.packages("sqldf")
crs$dataset[crs$dataset == -999.00] <- NA
crs$test
crs$dataset[crs$dataset == -999.00] <- NA
library (caret)
t1 <-(cbind(sdata, crs$pr)
)
getwd()
setwed("c:/R")
setwd("c:/R")
getwd()
myfunction()
source('C:/R/test1.R')
myfunction()
source('C:/R/test1.R')
myfunction()
source('~/.active-rstudio-document')
source('C:/R/test1.R')
second(9)
second()
source('C:/R/test1.R')
second(9)
myfunction()
second (9)
source('~/.active-rstudio-document')
second (9)
x <-c("a", "b", "c", "c", "d", "a")
x[1]
x[3]
x[1:4]
x[x>"a"]
u <- x>"a"
u
x <- list (foo=1:4, bar = 0.6)
x[1]
x[[1]]
x$bar
x
x[[1]]
x$bar
x["bar"]
t10k <- read.csv("t10k.csv")
describe(t10k)
str(t10k)
library (caret)
inTrain <-createDataPartition(y=t10k$Label), p=0.75, list=FALSE)
inTrain <-createDataPartition(y=t10k$Label, p=0.75, list=FALSE)
training <-t10k[inTrain,]
testing <-t10k[-inTrain,]
ncol(training)
drops <- "Weight"
training[,!(names(training) %in% drops)]
str(training)
training <- training[-grep('Weight',colnames(training))]
head (training)
training[training == -999.00] <- NA
summary (training)
nrow(training)
head(training)
view(training)
View(training)
